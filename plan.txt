node v20.9.0
npm 10.2.3

Структура приложения:
  Отдельно Frontend на своем порту 3000
  Отдельно Backend на своем порту 4000
  Отдельно MongoDB на своем порту 27017 в Docker контейнере
Всё будет запускаться через docker-compose.yml
Регистрация , авторизация, выход +++
Перевести на MongoDB
===================================================================
пустые страницы левого меню
обработать регистрацию для админа
Главная убрать, линк на лого
================================================
Пагинация пользователей
Удаление, редактю просмотр пользователя
Редактирование самим пользователем
Редактирование админом
не более 10 картинок
Удаление картинок
запись на сервер
стейт в AddHotels
useMemo
Просмотр гостиниц для всех
Страница гостиницы
просмотр фото в модалке
Удаление фото при редактировании
добавить номер в гостиницу
Просмотр номеров на странице гостиницы
Готиницы добавить строку поиска
Брони создание
Бронь получение
в просмотре номера добавить даты и кнопку бронировать
2.5.1.  POST /api/client/support-requests/   // Позволяет пользователю с ролью client создать обращение в техподдержку.
2.5.5.  POST /api/common/support-requests/:id/messages // Позволяет пользователю с ролью manager или client отправлять сообщения в чат.
Форма input and button
сигналы WS
запросы по сигналам
прочитано
Подписка на сообщения из чата техподдержки
Добавить список обращений для пользователя
WS=================
модель
API Web
***
2.5.2.  GET /api/client/support-requests/   // Получение списка обращений в поддержку для клиента
2.5.3.  GET /api/manager/support-requests/   // Позволяет пользователю с ролью manager получить список обращений от клиентов.
2.5.4.  GET /api/common/support-requests/:id/messages // Получение истории сообщений из обращения в техподдержку
2.5.5.  POST /api/common/support-requests/:id/messages  //Позволяет пользователю с ролью manager или client отправлять сообщения в чат.
2.5.6.  POST /api/common/support-requests/:id/messages/read   // Позволяет пользователю с ролью manager или client отправлять отметку, что сообщения прочитаны.
2.5.7.  message: subscribeToChat payload: chatId   // Позволяет пользователю с ролью manager или client получать новые сообщения в чате через WebSocket.


======= СДЕЛАНО ==================
Убрать uploadpics в хотел контроллере
Свойство hotel, на модель hotel
Пагинация в отелях  
Добавить контроль лимитов полей (кол-во символов) п. 2.1.5






======= НЕ сделано ===============
BACK-END:

===== Модуль отели ==========
  Добавление гостиниц
    401 - если пользователь не аутентифицирован;
    403 - если роль пользователя не admin.
  2.1.4. Получение списка гостиниц
    401 - если пользователь не аутентифицирован;
    403 - если роль пользователя не admin.
 и т.д. по ошибкам

===== Модуль брони ==========
  2.2.5. Отмена бронирования менеджером
    401 - если пользователь не аутентифицирован;
    403 - если роль пользователя не manager;
    400 - если брони с указанным ID не существует.

===== Модуль CHAT ==========
  401 - если пользователь не аутентифицирован;
  403 - если роль пользователя не подходит.

 ВЕЗДЕ Контоль ответов 401, 403 и т.д.

===== Модуль Юзерс ==========
  400 - если email уже занят.
  401 - если пользователь не аутентифицирован; 
  401 - если пользователя с указанным email не существует или пароль неверный. LOGIN
  403 - если роль пользователя не admin.


Проверить Всё

FRONT-END
Разделение интерфейса по ролям Админ, менеджер, клиент, никто
Светить все роуты
===== Модуль отели ==========
Редактирование гостиницы
Редактирование номера

===== Модуль брони ==========
2.2.4. Список броней конкретного пользователя


***
Контроль доступа Фронт
***
Контроль доступа Бэк

2.2.4 !!!!!!!!!!!!!!!!!!! Правильный Бэкенд для манагера
2.2.5 !!!!!!!!!!!!!!!!!!! Правильный Бэкенд для манагера
API-шки поправить на ошибки








