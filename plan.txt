node v20.9.0
npm 10.2.3

Структура приложения:
  Отдельно Frontend на своем порту 3000
  Отдельно Backend на своем порту 4000
  Отдельно MongoDB на своем порту 27017 в Docker контейнере
Всё будет запускаться через docker-compose.yml
Регистрация , авторизация, выход +++
Перевести на MongoDB
===================================================================
пустые страницы левого меню
обработать регистрацию для админа
Главная убрать, линк на лого
================================================
Пагинация пользователей
Удаление, редактю просмотр пользователя
Редактирование самим пользователем
Редактирование админом
не более 10 картинок
Удаление картинок
запись на сервер
стейт в AddHotels
useMemo
Просмотр гостиниц для всех
Страница гостиницы
просмотр фото в модалке
Удаление фото при редактировании
добавить номер в гостиницу
Просмотр номеров на странице гостиницы
Готиницы добавить строку поиска
Брони создание
Бронь получение
в просмотре номера добавить даты и кнопку бронировать
2.5.1.  POST /api/client/support-requests/   // Позволяет пользователю с ролью client создать обращение в техподдержку.
2.5.5.  POST /api/common/support-requests/:id/messages // Позволяет пользователю с ролью manager или client отправлять сообщения в чат.

***********************************************************************
Добавить список обращений для пользователя


WS=================
модель
API Web
***
2.5.2.  GET /api/client/support-requests/   // Получение списка обращений в поддержку для клиента
2.5.3.  GET /api/manager/support-requests/   // Позволяет пользователю с ролью manager получить список обращений от клиентов.
2.5.4.  GET /api/common/support-requests/:id/messages // Получение истории сообщений из обращения в техподдержку
2.5.5.  POST /api/common/support-requests/:id/messages  //Позволяет пользователю с ролью manager или client отправлять сообщения в чат.
---
2.5.6.  POST /api/common/support-requests/:id/messages/read   // Позволяет пользователю с ролью manager или client отправлять отметку, что сообщения прочитаны.
2.5.7.  message: subscribeToChat payload: chatId   // Позволяет пользователю с ролью manager или client получать новые сообщения в чате через WebSocket.

//=====  7 методов описаных в п. 1.4
createDialog
createMassage
delete
find
...

*****************************************
Форма input and button
сигналы WS
запросы по сигналам
прочитано



*****************************************





***
Убрать uploadpics в хтел контроллере
***
Контроль доступа Фронт
***
Контроль доступа Бэк
*** 
Разделение интерфейса по ролям Админ, менеджер, клиент, никто
*** 
масштаб сообщений WS от размера окна



